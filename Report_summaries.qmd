---
title: "Summary Numbers for Pilot Supply Chain Reports"
subtitle: "Supply Chain Risk Project - Phase 2"
author: "Althea Marks"
affiliation: "Stanford Center for Ocean Solutions"
date: 2023-03-22
format: html
---

## Packages, Version Control, Directories

```{r, setup}

# set universal code chunk options, suppress warning and messages
knitr::opts_chunk$set(warning = F, message = F)
```

```{r packages_directories}
# package and R version control for reproducibility 
library("groundhog")
# list additional packages in vector below
pkgs <- c(
  "readr",
  "tidyverse", 
  "magrittr",
  "readxl",
  "purrr",
  "rvest") 
# Keep this date set to load package versions corresponding with date
groundhog.library(pkgs, "2023-01-01")

## Set up directories 
# data directory - create if doesn't already exsist
if(dir.exists(file.path("./data"))){
  data_dir <- file.path("./data")
} else{dir.create(file.path("./data"))
  data_dir <- file.path("./data")
}

# output directory - create if doesn't already exsist
if(dir.exists(file.path("./output"))){
  output_dir <- file.path("./output")
} else{dir.create(file.path("./output"))
  output_dir <- file.path("./output")
}

# scripts for analysis
scripts_dir <- file.path("./R")
```

## Functions used to generate report numbers

```{r functions}
source(file.path(scripts_dir, "functions.R"))
```

## Read in Data

```{r Import_Data}
## Compiled vessel data
all_vessels <- read_csv(file.path(data_dir,"CompiledVesselsIndicators-2023-03-29.csv"))
# replace placeholder value "9999" with NA for analysis. 9999 in vv_ais_coverage_percent represents vessels that had vessel viewer records but had "unknown" AIS records.
all_vessels$vv_ais_coverage_percent[which(all_vessels$vv_ais_coverage_percent == 9999)] <- NA

## Dummy PVR vessel subset
dum_vessels <- read_csv(file.path(data_dir, "pvr_vessels_dummy_2023-03-03.csv")) %>% 
  filter(!is.na(v_id))
# replace vessel names with non-identifying values
dum_vessels$vv_ais_coverage_percent[which(dum_vessels$vv_ais_coverage_percent == 9999)] <- NA

## IUU Vessel List
iuu_vessels <- read_excel(file.path(data_dir,"IUUList-20230127.xls"), sheet = "IUUList")

```

## Organize Data by Supply Chains

```{r wrangle_data}
# summarize of companies and their supply chains
######### IDEA - How to create a dataframe that can list what variables to filter Compiled Vessels Indicators by (not set variables across supply chains) that could feed a function generating individual supply chain dataframes
company_sup_chains <- all_vessels %>% 
  group_by(c, c_listname) %>% 
  summarize()

# Specific supply chains
bb_fiji <- all_vessels %>% 
  filter(c %in% c("Bumble Bee"),
         c_listname %in% c("Tuna"),
         c_flag %in% c("Fiji"),
         str_detect(gfw_eez, "FJI"))

bb_malaysia <- all_vessels %>% 
  filter(c %in% c("Bumble Bee"),
         c_listname %in% c("Tuna"),
         c_flag %in% c("Malaysia"),
         str_detect(gfw_eez, "MYS"))

nesi_srilanka <- all_vessels %>% 
  filter(c %in% c("NESI"),
         c_listname %in% c("Sri Lanka Yellowfin"),
         c_flag %in% c("Sri Lanka"))

nesi_maldives <- all_vessels %>% 
    filter(c %in% c("NESI"),
         c_listname %in% c("Maldives Yellowfin"),
         c_flag %in% c("Maldives"))

nesi_norway <- all_vessels %>% 
    filter(c %in% c("NESI"),
         c_listname %in% c("Norway Cod Haddock"))

sd_corvina <- all_vessels %>% 
  filter(c %in% c("Sea Dealight"),
         c_listname %in% c("Suriname Corvina"))

cc_kor_bigeye <- all_vessels %>% 
  filter(c %in% c("Culinary Collaborations"),
         c_listname %in% c("Korean Bigeye Tuna"))

cc_kor_skip <- all_vessels %>% 
  filter(c %in% c("Culinary Collaborations"),
         c_listname %in% c("Korean Skipjack"))

cc_jpn_skip <- all_vessels %>% 
  filter(c %in% c("Culinary Collaborations"),
         c_listname %in% c("Japanese Skipjack"))

```

## Get Flag of Convenience List

```{r scrape_open_registries}

# scrape FOC list from ITF Seafarers (International Transport Workers Federation)
itf_foc <- read_html("https://www.itfseafarers.org/en/focs/current-registries-listed-as-focs") %>% 
  html_node(xpath = "/html/body/div[1]/div/div[2]/main/div[2]/div/div/div[3]/article/div/div[1]/ul") %>% 
  html_elements("li") %>% 
  html_text2() %>% 
  as_tibble() %>% 
  rename("c_flag" = value) # name variable column

# vessels with flags that match in ITF FOC list
# foc_vessels <- vessel_assess %>% 
#   semi_join(itf_foc, by = "Flag")

```

## Pull out Vessels with Risk Indicators

```{r vessels_with_risk}
# identify specific vessels that were flagged with High and Medium Risk Indicators
risky_vessels <- all_vessels %>% 
  filter(vv_iuu_listed == TRUE | vv_rfmo_unauthorized_events > 0 | vv_encounters_rfmo_unauthorized > 0 |
          vv_mpa_events > 0 | vv_ais_disabled_n > 0 | map_long_trip_n > 0 | vv_name_change > 0 | vv_flag_change > 0) %>% 
  select(c_name, c, c_listname, c_imo, c_mmsi, c_ircs, c_flag, 70:length(all_vessels))

 write_csv(risky_vessels, file.path(output_dir, paste0("COS_risky_vessels_vv_", Sys.Date(), ".csv")))
```

## Get Values for Reports

```{r generate_report_values}
# replace supply_chain argument with one of interest to generate report values

speak_generally(cc_jpn_skip)

check_kde_list(cc_jpn_skip)

assess_risk(cc_jpn_skip)

give_context(cc_jpn_skip, itf_foc)

detail_vessels(cc_jpn_skip)

```

### Maldives Licenced Fishing Vessel List

```{r maldives_vessel_list, eval = F}

maldives_summary <- nesi_maldives %>% 
  summarise(
    "vessel_name_on_list" = sum(maldives_nat_fishing_v_name, na.rm = T),
    "vessel_regst_outdated" = sum(maldives_nat_fishing_v_name & !maldives_nat_fishing_v_reg_num, na.rm = T),
    "vessels_w_both" = sum(maldives_nat_fishing_v_name & maldives_nat_fishing_v_reg_num, na.rm = T),
    "vessels_not_listed" = sum(!maldives_nat_fishing_v_name),
    "vessel_n_supply_chain" = length(maldives_nat_fishing_v_name)
  )
```

### Report values from Big Query

```{r report_big_query, eval=FALSE}

bq_kde_nesi_sl <- nesi_srilanka %>%
  summarize(
    "company" = unique(c),
    "supply_chain" = unique(c_listname),
    "species" = any(!is.na(c_species) | !is.na(c_common_name)),
    "country_harvest" = any(!is.na(c_country)),
    "ports_landing" = any(!is.na(c_port)),
    "eez_highseas" = NA,
    "harvest_rfmo" = NA,
    "harvest_fao" = any(!is.na(c_fao)),
    "harvest_fao_sub" = NA,
    "cert_name" = NA,
    "fip" = any(!is.na(FIP)),
    "vessel_name" = any(!is.na(c_name)),
    "vessel_name_n" = sum(!is.na(c_name)),
    "vessel_imo" = any(!is.na(c_imo)),
    "vessel_imo_n" = sum(!is.na(c_imo)),
    "vessel_mmsi" = any(!is.na(c_mmsi)),
    "vessel_mmsi_n" = sum(!is.na(c_mmsi)),
    "vessel_callsign" = NA,
    "vessel_flag" = any(!is.na(c_flag)),
    "vessel_flag_n" = sum(!is.na(c_flag)),
    "ais_data" = any(!is.na(gfw_prop_ais_coverage)),
    "ais_data_n" = sum(!is.na(gfw_prop_ais_coverage)),
    "ais_coverage_min" = min(gfw_prop_ais_coverage, na.rm = T),
    "ais_coverage_max" = max(gfw_prop_ais_coverage, na.rm = T),
    "ais_coverage_median" = median(gfw_prop_ais_coverage, na.rm = T),
    "transship_reported" = NA
  ) 

bq_indicators_nesi_sl <- nesi_srilanka %>% 
  summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
      # High Risk Indicators      
            "iuu_listed" = sum(as.numeric(vv_iuu_listed), na.rm = T),
            "rfmo_no_auth_events" = NA,
            "rfmo_no_auth_vessels_n" = NA,
            "transship_rfmo_events" = sum(gfw_n_transship_unauthorized, na.rm = T),
            "transship_rfmo_vessels_n" = sum(gfw_n_transship_unauthorized > 0, na.rm = T),
            "mpa_events" = sum(gfw_n_trips_mpa > 0, na.rm = T),
            "mpa_vessels_n" = sum(gfw_n_trips_mpa > 0 , na.rm = T),
            "mpa_total_hrs" = sum(gfw_fishing_hr_mpa, na.rm = T),
      # Medium Risk Indicators
            "ais_disabling_events" = NA,
            "ais_disabling_vessels_n" = sum(gfw_prop_ais_disable > 0, na.rm = T ),
            "ais_disabling_total_hrs" = NA,
            "ais_prop_cover_2yr_min" = min(gfw_prop_ais_coverage, na.rm = T),
            "ais_prop_cover_2yr_max" = max(gfw_prop_ais_coverage, na.rm = T),
            "ais_prop_cover_2yr_median" = median(gfw_prop_ais_coverage, na.rm = T),
            # number of vessels with trips > 11 months
            "vessels_long_trip_n" = sum(map_long_trip_n, na.rm = T),
            "vessels_name_change_n" = sum(vv_name_change, na.rm = T),
            "vessels_flag_change_n" = sum(vv_flag_change, na.rm = T)
  )

# vessels found by Big Query and not vessel viewer 
# some error associated with how I classified findings. If AIS was "unknown" but found in VV I recorded as NA.
# vessels with not record were also recorded as NA. 

bq_vessels_not_vv <- nesi_srilanka %>% 
  filter(!is.na(gfw_mmsi) & is.na(vv_ais_coverage_percent)) %>% 
  filter(!is.na(gfw_prop_ais_coverage)) %>% 
  select(c_name, c, c_listname, c_imo, c_mmsi, c_flag, gfw_mmsi, gfw_prop_ais_coverage, 70:length(nesi_srilanka)) 

write_csv(bq_vessels_not_vv, file.path(out_dir, paste0("COS_BQvessels_not_VV_",Sys.Date(), ".csv")))

```

### Run all supply chains (one click)

This chunk could run all supply chains through report value functions at once.

```{r kde_checklist_all, eval=FALSE}

# create kde checklist for all supply chains
kde_checklist <- purrr::map2_dfr(company_sup_chains$c, company_sup_chains$c_listname, check_kde_data)

```

```{r quick_summary_jim, eval=FALSE}
summary_jim <- all_vessels %>% 
  group_by(c, c_listname) %>% 
  summarize(num_vessels = length(c_name),
            num_vessels_ais = sum(!is.na(gfw_prop_ais_coverage)),
            percent_vessels_ais = num_vessels_ais / num_vessels *100,
            mean_ais_prop = mean(gfw_prop_ais_coverage, na.rm = T),
            med_ais_prop = median(gfw_prop_ais_coverage, na.rm = T))
```

# 

## General report values

-   Number of vessels in supply chain
-   AIS positions found for percent of supply chain vessels
-   Range AIS coverage percent in last year for supply chain

## KDE checklist

-   percent of missing KDE
-   species scientific name
-   country of harvest
-   port(s) of landing
-   fishing in EEZ or high seas
-   RFMO of harvest
-   FAO region
-   FAO subregion (optional)
-   Certification name (if applicable)
-   FIP profile (if applicable)
-   Vessel name
-   Vessel IMO IMO number
-   Vessel MMSI
-   Vessel call sign (optional)
-   Vessel flag state (optional)
-   AIS data
-   Reported transshipments

## List of IUU report indicators

-   RFMO IUU blacklisted vessels
-   Fishing events in RFMO without known authorization
    -   number of vessels
-   Potential transshipment events in RFMO without known authorization
    -   number of vessels
-   Potential fishing events in Marine Protected Areas
    -   number of vessels
    -   total fishing hours
-   Intentional ais disabling events
    -   total hours disabled
    -   proportion of AIS coverage in last year
-   Vessels with long fishing trips (\>11 mo)
-   Number of vessel name changes in last year
-   Number of vessel flag changes in last year

```{r iuu_vessel_list, eval=FALSE}

iuu_listed <- iuu_vessels %>% 
  filter(CurrentlyListed == "True") %>% 
  select(Name, MMSI, VesselStatus, 20:47) %>% 
  mutate(Name = toupper(Name),
         MMSI = as.numeric(MMSI))

scrt_vessels <- vessels %>% 
  select(c_name, gfw_mmsi) %>% 
#  filter(gfw_mmsi > 0) %>% 
  rename("Name" = c_name,
         "MMSI" = gfw_mmsi)

# cross validate IUU list and scrt vessels by mmsi - will match by NA (interpret results carefully)
iuu_mmsi <- iuu_listed %>%
  inner_join(scrt_vessels, by = c("MMSI"))
# cross validate IUU list by vessel name
iuu_name <- iuu_listed %>% 
  inner_join(scrt_vessels, by = "Name")



# Need to manually look at both tables of matching
```

## Contextual Risk Indicators

-   Corruption Perceptions Index
-   PSMA ratification
-   EU carding status
-   US listing status
-   SIMP
-   Petrossian & Clark (2014) score
-   Open Registries (vessel flag country)
