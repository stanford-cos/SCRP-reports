---
title: "Metacoalition Member Company Survey - Baseline Analysis" 
subtitle: "Supply Chain Risk Project Phase 3"
author: 
  - name: Althea Marks
    orcid: 0000-0002-9370-9128
    email: email
    affiliations:
      - name: Stanford Center for Ocean Solutions
date: "`r Sys.Date()`"
format: 
  html: 
    number-sections: false
    toc: true
    code-tools: true
    theme: cosmo 
    self-contained: true
    page-layout: full
title-block-banner: TRUE
execute:
     echo: false
     include: false
     warning: false
---

```{r}
#| warning: false
#| label: setup
#| 
library(renv)
library(readxl)
library(tidyverse)

## Set up directories 
# data directory - create if doesn't already exsist
if(dir.exists(file.path("./data"))){
  data_dir <- file.path("./data")
} else{dir.create(file.path("./data"))
  data_dir <- file.path("./data")
}

# output directory - create if doesn't already exsist
if(dir.exists(file.path("./output"))){
  output_dir <- file.path("./output")
} else{dir.create(file.path("./output"))
  output_dir <- file.path("./output")
}

# output directory - create if doesn't already exsist
if(dir.exists(file.path("./output/figures"))){
  fig_dir <- file.path("./output/figures")
} else{dir.create(file.path("./output/figures"))
  fig_dir <- file.path("./output/figures")
}

# scripts for analysis
scripts_dir <- file.path("./R")

# data for report
data_comp <- file.path(data_dir, "company_survey")
```

```{r import-data}
survey_raw <- read_excel(file.path(data_comp, "SCRP-Metacoalition-Company-Survey-Raw-2023-10-02.xlsx"),
                         sheet = "Responses")
```

```{r source-functions}
source(file.path(scripts_dir, "functions-survey.R"))
```

```{r figure-colors}
  BLUE <- "#2A5D82"
  LBLUE <- "#81AEBF"
  BLACK <- "#202020"
```

```{r clean-data}
# extract column names
questions_raw <- colnames(survey_raw) %>% 
  as_tibble() 
# dataframe with only survey questions
survey_questions <- str_subset(questions_raw$value, "^[:digit:]") %>% 
  as_tibble() 
# assign survey question IDs
survey_questions %<>% 
  mutate(question_id = paste0("Q",seq(1:nrow(survey_questions)))) %>% 
  rename("question" = value) %>% 
  select(2,1)

# create clean version
survey_clean <- survey_raw %>% 
  select(-1)

# simplify column names to question IDs used in survey_questions
colnames(survey_clean) <- gsub(" ", "_", colnames(survey_clean))
colnames(survey_clean)[6:16] <- survey_questions$question_id

# create dataframe for analysis
survey_analysis_df <- survey_clean %>% 
  select(!1:4)

### Manual Cleaning in needed for errors in raw data

# question 2., response 7 (Response ID eJzAf5Xu): 
# "None" is listed when other responses were selected, remove? - KT & AM agree yes 2023-10-04
survey_analysis_df[7,"Q2"] <- str_replace(survey_analysis_df[[7,"Q2"]], ",None$", "")

# question 3., response 4:
# selected yes, but text says "No" and includes description under selection no
# remove "No" from yes selection column? - AM yes 2023-10-05
survey_analysis_df <- survey_analysis_df %>% 
  mutate(Q3 = ifelse(Q3 == "No", NA, Q3))


```

# Question 1

`r remove_q(survey_questions,1)`

```{r q1-figure-fun}
#| include: true
q1_df <- prep_yn_df(survey_analysis_df, 1)
fig_1 <- mk_yn_fig(q1_df)
fig_1
ggsave(file.path(fig_dir, "Figure_Q1.png"),
       fig_1, 
       device = "png",
       width = 6,
       scale = 1.618,
       dpi = 600,
       )
```

# Question 2

`r remove_q(survey_questions,2)`

```{r q2-fig}
#| include: true

# grex patterns for separating multiple choice selections listed in a single cell
pattern <- "(?<=\\)),|(?<=Other \\(Please specify\\)),|(?<=Other),|(?<=None),"
# pattern for extracting text entered when selected other
specify_pattern <- "Other \\(Please specify\\):?(.*)$"

# record other text in a separate vector for reporting
specified_text_vector <- survey_analysis_df %>%
  mutate(specified_text = str_extract(Q2, specify_pattern)) %>%
  pull(specified_text) %>%
  str_replace("Other \\(Please specify\\):?", "") %>%
  na.omit() %>%
  unique()

question_df <- survey_analysis_df %>%
  mutate(Q2 = str_split(Q2, pattern)) %>%
  unnest_longer(Q2) %>%
  select(1, "Q2") %>%
  transmute(Collector_Name = factor(Collector_Name),
            Q2 = Q2,
            response = str_replace(Q2, " (?=\\().*", "")) %>%
  count(response) %>% 
  arrange(-n) # sort largest to smallest

#pattern <- "(?<=\\)),|(?<=Other \\(Please specify\\)),|(?<=Other),|(?<=None),"
# 
# question_df <- survey_analysis_df %>%
#   mutate(Q2 = str_split(Q2, pattern)) %>%
#   unnest_longer(Q2) %>%
#   select(1, "Q2") %>%
#   transmute(Collector_Name = factor(Collector_Name),
#             Q2 = Q2,
#             response = str_replace(Q2, " (?=\\().*", "")) %>%
#   count(response)

  fig <- ggplot(question_df) +
    geom_col(aes(n, reorder(response, -desc(n))), fill = BLUE, width = 0.6) + 
    scale_x_continuous(
      limits = c(0, 20.5),
      breaks = seq(0, 20, by = 5), 
      expand = c(0, 0), # The horizontal axis does not extend to either side
      position = "bottom"  # Labels are located on the bottom
    ) +
    # The vertical axis extends upwards & down
    scale_y_discrete(expand = expansion(add = c(0.5, 0.5))) +
    theme(
      # Set background color to white
      panel.background = element_rect(fill = "white"),
      # Set the color and the width of the grid lines for the horizontal axis
      panel.grid.major.x = element_line(color = LBLUE, size = 0.3),
      # Remove tick marks by setting their length to 0
      axis.ticks.length = unit(0, "mm"),
      # Remove the title for both axes
      axis.title = element_blank(),
      # Only left line of the vertical axis is painted in black
      axis.line.y.left = element_line(color = "black"),
      # Customize labels from the vertical axis
      axis.text.y = element_text(size = 12),
      # But customize labels for the horizontal axis
      axis.text.x = element_text(size = 12)
    ) +
    geom_shadowtext(
      data = subset(question_df, n < 2),
      aes(n, y = response, label = n),
      hjust = 0,
      nudge_x = 0.3,
      colour = BLUE,
      bg.colour = "white",
      bg.r = 0.2,
      size = 4
    ) + 
    geom_text(
      data = subset(question_df, n >= 2),
      aes(n-1.5, y = response, label = n),
      hjust = 0,
      nudge_x = 0.3,
      colour = "white",
      size = 4
    )

fig
  
ggsave(file.path(fig_dir, "Figure_Q2.png"),
       fig, 
       device = "png",
       width = 6,
       scale = 1.618,
       dpi = 600,
       )
```

text responses for `Other` selections:


```{r echo=FALSE, include= T, results="asis"}
# display text open text responses
for (x in seq_along(specified_text_vector)) {
    cat(specified_text_vector[x], "\n")
}
```

# Question 3

`r remove_q(survey_questions,3)`

```{r q3-figure}
#| include: true

question_df <- survey_analysis_df %>%
  mutate(Q3_agg = ) %>%
  select(Q3) %>% 
  count(response)

```

# Question 4

`r remove_q(survey_questions,6)`

# Question 5

`r remove_q(survey_questions,8)`

```{r q8-figure}
#| include: true
q8_df <- prep_yn_df(survey_analysis_df, 8)
fig_8 <- mk_yn_fig(q8_df)
fig_8
ggsave(file.path(fig_dir, "Figure_Q8.png"),
       fig_8, 
       device = "png",
       width = 6,
       scale = 1.618,
       dpi = 600,
       )
```
