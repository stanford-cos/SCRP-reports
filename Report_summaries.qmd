---
title: "summary-figures"
format: html
editor: visual
---

## Packages, Package version control, directories

```{r, setup}

# set universal code chunk options, suppress warning and messages
knitr::opts_chunk$set(warning = F, message = F)
```

```{r packages_directories}
# package and R version control for reproducibility 
library("groundhog")
# list additional packages in vector below
pkgs <- c(
  "readr",
  "tidyverse", 
  "magrittr",
  "readxl",
  "purrr",
  "rvest") 
# Keep this date set to load package versions corresponding with date
groundhog.library(pkgs, "2023-01-01")

## Set up directories - need to fix
if(dir.exists(file.path("./data"))){
  data_dir <- file.path("./data")
} else{dir.create(file.path("./data"))
  data_dir <- file.path("./data")
}

if(dir.exists(file.path("./output"))){
  output_dir <- file.path("./output")
} else{dir.create(file.path("./output"))
  output_dir <- file.path("./output")
}

```

## Read in Data

```{r Import_Data}
## Compiled vessel data
all_vessels <- read_csv(file.path(data_dir,"CompiledVesselsIndicators-2023-02-28.csv"))

## IUU Vessel List
iuu_vessels <- read_excel(file.path(data_dir,"IUUList-20230127.xls"), sheet = "IUUList")


# summarize of companies and their supply chains
######### IDEA - How to create a dataframe that can list what variables to filter Compiled Vessels Indicators by (not set variables across supply chains) that could feed a function generating individual supply chain dataframes
company_sup_chains <- all_vessels %>% 
  group_by(c, c_listname) %>% 
  summarize()

## Set company variable (change based on which report is being generated)
# company <- ""
# sup_chain <- ""

## Filter data by company & supply chain
# vessels <- all_vessels %>% 
#   filter(c == company,
#          c_listname == sup_chain)

# Specifically look at Bumble Bee Tuna supply chain of Fiji flagged vessels fishing in Fiji
bb_fiji <- all_vessels %>% 
  filter(c %in% c("Bumble Bee"),
         c_listname %in% c("Tuna"),
         c_flag %in% c("Fiji"),
         str_detect(gfw_eez, "FJI"))

# NESI Sri Lanka Yellowfin 
nesi_srilanka <- all_vessels %>% 
  filter(c %in% c("NESI"),
         c_listname %in% c("Sri Lanka Yellowfin"),
         c_flag %in% c("Sri Lanka"))

sd_corvina <- all_vessels %>% 
  filter(c %in% c("Sea Dealight"),
         c_listname %in% c("Suriname Corvina"))

```

```{r scrape_open_registries}

# scrape FOC list from ITF Seafarers (International Transport Workers Federation)
itf_foc <- read_html("https://www.itfseafarers.org/en/focs/current-registries-listed-as-focs") %>% 
  html_node(xpath = "/html/body/div[1]/div/div[2]/main/div[2]/div/div/div[3]/article/div/div[1]/ul") %>% 
  html_elements("li") %>% 
  html_text2() %>% 
  as_tibble() %>% 
  rename("c_flag" = value) # name variable column

# vessels with flags that match in ITF FOC list
# foc_vessels <- vessel_assess %>% 
#   semi_join(itf_foc, by = "Flag")

```

## Functions used to generate report numbers

```{r functions}

# create report of general supply chain summary stats
speak_generally <- function(supply_chain){
  report_general <- supply_chain %>% 
  summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
            "vessels_total_n" = length(v_id),
            "vessels_ais_n" = sum(!is.na(vv_ais_coverage_percent) & vv_ais_coverage_percent != 9999),
            "prct_vessels_ais" = vessels_ais_n / vessels_total_n,
            "prct_ais_cover_min" = min(vv_ais_coverage_percent, na.rm = T),
            "prct_ais_cover_max" = max(vv_ais_coverage_percent, na.rm = T),
            "prct_ais_cover_median" = median(vv_ais_coverage_percent, na.rm = T),
            "prct_ais_cover_mean" = mean(vv_ais_coverage_percent, na.rm = T)
            )
  name <- paste0("rep_1_general_", deparse(substitute(supply_chain)))
  assign(name, report_general, envir = parent.frame())
  return(report_general)
}

# create checklist of Key data elements (kde) for each company supply chain
# assesses completeness of data company provided
check_kde_list <- function(supply_chain){
  kde <- supply_chain %>% 
    summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
            "species" = any(!is.na(c_species) | !is.na(c_common_name)),
            "country_harvest" = any(!is.na(c_country)),
            "ports_landing" = any(!is.na(c_port)),
            "eez_highseas" = NA,
            "harvest_rfmo" = NA,
            "harvest_fao" = any(!is.na(c_fao)),
            "harvest_fao_sub" = NA,
            "cert_name" = NA,
            "fip" = any(!is.na(FIP)),
            "vessel_name" = any(!is.na(c_name)),
            "vessel_imo" = any(!is.na(c_imo)),
            "vessel_mmsi" = any(!is.na(c_mmsi)),
            "vessel_callsign" = NA,
            "vessel_flag" = any(!is.na(c_flag)),
            "ais_data" = any(!is.na(gfw_prop_ais_coverage)),
            "transship_reported" = NA
            ) 
  name <- paste0("rep_2_kde_", deparse(substitute(supply_chain)))
  assign(name, kde, envir = parent.frame())
  return(kde)
}

# Generate Risk Indicators for report with vessel viewer values
assess_risk <- function(supply_chain){
  indicators <- supply_chain %>% 
  summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
      # High Risk Indicators      
            "iuu_listed" = sum(as.numeric(vv_iuu_listed), na.rm = T),
            "rfmo_no_auth_events" = sum(vv_rfmo_unauthorized_events, na.rm = T),
            "rfmo_no_auth_vessels_n" = sum(vv_rfmo_unauthorized_events > 0, na.rm = T),
            "transship_rfmo_events" = sum(vv_encounters_rfmo_unauthorized, na.rm = T),
            "transship_rfmo_vessels_n" = sum(vv_encounters_rfmo_unauthorized > 0, na.rm = T),
            "mpa_events" = sum(vv_mpa_events, na.rm = T),
            "mpa_vessels_n" = sum(vv_mpa_events > 0, na.rm = T),
            "mpa_total_hrs" = sum(vv_mpa_hrs, na.rm = T),
      # Medium Risk Indicators
            "ais_disabling_events" = sum(vv_ais_disabled_n, na.rm = T),
            "ais_disabling_vessels_n" = sum(vv_ais_disabled_n > 0, na.rm = T),
            "ais_disabling_total_hrs" = sum(vv_ais_disable_hrs, na.rm = T),
            "ais_prop_cover_1yr_min" = min(vv_ais_coverage_percent, na.rm = T),
            "ais_prop_cover_1yr_max" = max(vv_ais_coverage_percent, na.rm = T),
            "ais_prop_cover_1yr_median" = median(vv_ais_coverage_percent, na.rm = T),
            # number of vessels with trips > 11 months
            "vessels_long_trip_n" = sum(map_long_trip_n, na.rm = T),
            "vessels_name_change_n" = sum(vv_name_change, na.rm = T),
            "vessels_flag_change_n" = sum(vv_flag_change, na.rm = T)
  )
  name <- paste0("rep_3_ind_vv_", deparse(substitute(supply_chain)))
  assign(name, indicators, envir = parent.frame())
  return(indicators)
}

# Contextual Indicators
give_context <- function(supply_chain, foc_list){
  context <- supply_chain %>% 
  summarise("company" = unique(c),
            "supply_chain" = unique(c_listname),
            "vessel_flags" = paste(unique(c_flag), sep = ";"),
            "cpi" = NA,
            "psma" = paste(unique(m_c_psma), sep = ";"),
            # these need to use vessel flag not country of operation
            "eu_card" = paste(unique(m_c_eu_flag), sep = ";"),
            "us_card" = paste(unique(m_c_us_flag), sep = ";"),
            "simp" = NA, # could create list of species or scrape
            "petrossian_clark" = paste(unique(m_petro_score), sep = ";"),
            "pvr" = paste(unique(me_pvr_status), sep = ";")
            )
  # True if vessel flags are on FOC list, False if not
  foc <- any(str_detect(foc_list$c_flag, paste(context$vessel_flags, collapse = "|")))
  # add foc to output
  context_2 <- context %>% 
    mutate("open_registry" = foc)
  
  name <- paste0("rep_4_context_", deparse(substitute(supply_chain)))
  assign(name, context_2, envir = parent.frame())
  return(context_2)
}

#count_ind <- nesi_srilanka %>% 
detail_vessels <- function(supply_chain) {
  detail <- supply_chain %>%
    rowwise() %>% 
    mutate(
      c_name = toupper(c_name),
      # True/False of flagged indicator
      "iuu_logic" = vv_iuu_listed > 0,
      "unauth_rfmo_fish_logic" = vv_rfmo_unauthorized_events > 0,
      "unauth_trans_logic" = vv_encounters_rfmo_unauthorized > 0,
      "mpa_events_logic" = vv_mpa_events > 0,
      "disable_events_logic" = vv_ais_disabled_n > 0,
      "long_trip_logic" = ifelse(map_long_trip_n > 0, TRUE, FALSE),
      "name_logic" = vv_name_change > 0,
      "flag_logic" = vv_flag_change > 0,
      # High risk
      "count_high_ind" = sum(c_across(c(iuu_logic,
                             unauth_rfmo_fish_logic,
                             unauth_trans_logic,
                             mpa_events_logic)), na.rm = F),
      "iuu_listed" = vv_iuu_listed,
      "unauth_rfmo_fish_events" = vv_rfmo_unauthorized_events,
      "unauth_transship_events" = vv_encounters_rfmo_unauthorized,
      "mpa_fishing_events" = vv_mpa_events,
      "mpa_fishing_hours" = vv_mpa_hrs,
      # Medium
      "count_med_ind" = sum(c_across(c(disable_events_logic,
                             long_trip_logic,
                             name_logic,
                             flag_logic)), na.rm = T),
      "disable_events" = vv_ais_disabled_n,
      "disable_hours" = vv_ais_disable_hrs,
      "long_trip" = map_long_trip_n,
      "name_changes" = vv_name_change,
      "flag_changes" = vv_flag_change,
      "ais_coverage" = vv_ais_coverage_percent) %>%
    arrange(c_name) %>% 
    select(c_name, count_high_ind, iuu_listed, unauth_rfmo_fish_events,
           unauth_transship_events, mpa_fishing_events, mpa_fishing_hours,
           count_med_ind, disable_events, disable_hours, long_trip, name_changes,
           flag_changes, ais_coverage)
  
  name <- paste0("rep_5_details_", deparse(substitute(supply_chain)))
  assign(name, detail, envir = parent.frame())
  name2 <- paste0("detail_vessels_", deparse(substitute(supply_chain)), 
                  "_", Sys.Date(), ".csv")
  write_csv(detail, file.path(output_dir, name2))
  return(detail)
}


# flag_risky_vessels <- function(supply_chain){
# }
```

```{r vessels_with_risk}
# identify specific vessels that were flagged with High and Medium Risk Indicators
risky_vessels <- all_vessels %>% 
  filter(vv_iuu_listed == TRUE | vv_rfmo_unauthorized_events > 0 | vv_encounters_rfmo_unauthorized > 0 |
          vv_mpa_events > 0 | vv_ais_disabled_n > 0 | map_long_trip_n > 0 | vv_name_change > 0 | vv_flag_change > 0) %>% 
  select(c_name, c, c_listname, c_imo, c_mmsi, c_flag, 70:length(all_vessels))

#write_csv(risky_vessels, file.path(output_dir, paste0("COS_risky_vessels_vv_", Sys.Date(), ".csv")))
```


```{r generate_report_values}

speak_generally(sd_corvina)

check_kde_list(sd_corvina)

assess_risk(sd_corvina)

give_context(sd_corvina, itf_foc)

detail_vessels(sd_corvina)

```

```{r report_big_query, eval=FALSE}

bq_kde_nesi_sl <- nesi_srilanka %>%
  summarize(
    "company" = unique(c),
    "supply_chain" = unique(c_listname),
    "species" = any(!is.na(c_species) |!is.na(c_common_name)),
    "country_harvest" = any(!is.na(c_country)),
    "ports_landing" = any(!is.na(c_port)),
    "eez_highseas" = NA,
    "harvest_rfmo" = NA,
    "harvest_fao" = any(!is.na(c_fao)),
    "harvest_fao_sub" = NA,
    "cert_name" = NA,
    "fip" = any(!is.na(FIP)),
    "vessel_name" = any(!is.na(c_name)),
    "vessel_name_n" = sum(!is.na(c_name)),
    "vessel_imo" = any(!is.na(c_imo)),
    "vessel_imo_n" = sum(!is.na(c_imo)),
    "vessel_mmsi" = any(!is.na(c_mmsi)),
    "vessel_mmsi_n" = sum(!is.na(c_mmsi)),
    "vessel_callsign" = NA,
    "vessel_flag" = any(!is.na(c_flag)),
    "vessel_flag_n" = sum(!is.na(c_flag)),
    "ais_data" = any(!is.na(gfw_prop_ais_coverage)),
    "ais_data_n" = sum(!is.na(gfw_prop_ais_coverage)),
    "ais_coverage_min" = min(gfw_prop_ais_coverage, na.rm = T),
    "ais_coverage_max" = max(gfw_prop_ais_coverage, na.rm = T),
    "ais_coverage_median" = median(gfw_prop_ais_coverage, na.rm = T),
    "transship_reported" = NA
  ) 

bq_indicators_nesi_sl <- nesi_srilanka %>% 
  summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
      # High Risk Indicators      
            "iuu_listed" = sum(as.numeric(vv_iuu_listed), na.rm = T),
            "rfmo_no_auth_events" = NA,
            "rfmo_no_auth_vessels_n" = NA,
            "transship_rfmo_events" = sum(gfw_n_transship_unauthorized, na.rm = T),
            "transship_rfmo_vessels_n" = sum(gfw_n_transship_unauthorized > 0, na.rm = T),
            "mpa_events" = sum(gfw_n_trips_mpa > 0, na.rm = T),
            "mpa_vessels_n" = sum(gfw_n_trips_mpa > 0 , na.rm = T),
            "mpa_total_hrs" = sum(gfw_fishing_hr_mpa, na.rm = T),
      # Medium Risk Indicators
            "ais_disabling_events" = NA,
            "ais_disabling_vessels_n" = sum(gfw_prop_ais_disable > 0, na.rm = T ),
            "ais_disabling_total_hrs" = NA,
            "ais_prop_cover_2yr_min" = min(gfw_prop_ais_coverage, na.rm = T),
            "ais_prop_cover_2yr_max" = max(gfw_prop_ais_coverage, na.rm = T),
            "ais_prop_cover_2yr_median" = median(gfw_prop_ais_coverage, na.rm = T),
            # number of vessels with trips > 11 months
            "vessels_long_trip_n" = sum(map_long_trip_n, na.rm = T),
            "vessels_name_change_n" = sum(vv_name_change, na.rm = T),
            "vessels_flag_change_n" = sum(vv_flag_change, na.rm = T)
  )

# vessels found by Big Query and not vessel viewer 
# some error associated with how I classified findings. If AIS was "unknown" but found in VV I recorded as NA.
# vessels with not record were also recorded as NA. 

bq_vessels_not_vv <- nesi_srilanka %>% 
  filter(!is.na(gfw_mmsi) & is.na(vv_ais_coverage_percent)) %>% 
  filter(!is.na(gfw_prop_ais_coverage)) %>% 
  select(c_name, c, c_listname, c_imo, c_mmsi, c_flag, gfw_mmsi, gfw_prop_ais_coverage, 70:length(nesi_srilanka)) 

write_csv(bq_vessels_not_vv, file.path(out_dir, paste0("COS_BQvessels_not_VV_",Sys.Date(), ".csv")))

```

```{r kde_checklist_all, eval=FALSE}

# create kde checklist for all supply chains
kde_checklist <- purrr::map2_dfr(company_sup_chains$c, company_sup_chains$c_listname, check_kde_data)

```

```{r quick_summary_jim, eval=FALSE}
summary_jim <- all_vessels %>% 
  group_by(c, c_listname) %>% 
  summarize(num_vessels = length(c_name),
            num_vessels_ais = sum(!is.na(gfw_prop_ais_coverage)),
            percent_vessels_ais = num_vessels_ais / num_vessels *100,
            mean_ais_prop = mean(gfw_prop_ais_coverage, na.rm = T),
            med_ais_prop = median(gfw_prop_ais_coverage, na.rm = T))
```

## General report values

-   Number of vessels in supply chain
-   AIS positions found for percent of supply chain vessels
-   Range AIS coverage percent in last year for supply chain

## KDE checklist

-   percent of missing KDE
-   species scientific name
-   country of harvest
-   port(s) of landing
-   fishing in EEZ or high seas
-   RFMO of harvest
-   FAO region
-   FAO subregion (optional)
-   Certification name (if applicable)
-   FIP profile (if applicable)
-   Vessel name
-   Vessel IMO IMO number
-   Vessel MMSI
-   Vessel call sign (optional)
-   Vessel flag state (optional)
-   AIS data
-   Reported transshipments

## List of IUU report indicators

-   RFMO IUU blacklisted vessels
-   Fishing events in RFMO without known authorization
    -   number of vessels
-   Potential transshipment events in RFMO without known authorization
    -   number of vessels
-   Potential fishing events in Marine Protected Areas
    -   number of vessels
    -   total fishing hours
-   Intentional ais disabling events
    -   total hours disabled
    -   proportion of AIS coverage in last year
-   Vessels with long fishing trips (\>11 mo)
-   Number of vessel name changes in last year
-   Number of vessel flag changes in last year

```{r iuu_vessel_list, eval=FALSE}

iuu_listed <- iuu_vessels %>% 
  filter(CurrentlyListed == "True") %>% 
  select(Name, MMSI, VesselStatus, 20:47) %>% 
  mutate(Name = toupper(Name),
         MMSI = as.numeric(MMSI))

scrt_vessels <- vessels %>% 
  select(c_name, gfw_mmsi) %>% 
#  filter(gfw_mmsi > 0) %>% 
  rename("Name" = c_name,
         "MMSI" = gfw_mmsi)

# cross validate IUU list and scrt vessels by mmsi - will match by NA (interpret results carefully)
iuu_mmsi <- iuu_listed %>%
  inner_join(scrt_vessels, by = c("MMSI"))
# cross validate IUU list by vessel name
iuu_name <- iuu_listed %>% 
  inner_join(scrt_vessels, by = "Name")



# Need to manually look at both tables of matching
```

## Contextual Risk Indicators

-   Corruption Perceptions Index
-   PSMA ratification
-   EU carding status
-   US listing status
-   SIMP
-   Petrossian & Clark (2014) score
-   Open Registries (vessel flag country)
