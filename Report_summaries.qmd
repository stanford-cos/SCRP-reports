---
title: "summary-figures"
format: html
editor: visual
---

## Packages, Package version control, directories

```{r, setup}

# set universal code chunk options, suppress warning and messages
knitr::opts_chunk$set(warning = F, message = F)
```

```{r packages_directories}
# package and R version control for reproducibility 
library("groundhog")
# list additional packages in vector below
pkgs <- c(
  "readr",
  "tidyverse", 
  "magrittr",
  "readxl",
  "purrr",
  "rvest") 
# Keep this date set to load package versions corresponding with date
groundhog.library(pkgs, "2023-01-01")

## Set up directories - need to fix
if(dir.exists(file.path("../figures"))){
  fig_dir <- file.path("../figures")
} else{dir.create(file.path("../figures"))
  fig_dir <- file.path("../figures")
}

if(dir.exists(file.path("../data"))){
  data_dir <- file.path("../data")
} else{dir.create(file.path("../data"))
  data_dir <- file.path("../data")
}
```

## Read in Data

```{r Import_Data}
## Compiled vessel data
comp_vessels <- read_csv(file.path(data_dir,"CompiledVesselsIndicators-2023-02-15.csv"))

## IUU Vessel List
iuu_vessels <- read_excel(file.path(data_dir,"IUUList-20230127.xls"), sheet = "IUUList")

## Set company variable (change based on which report is being generated)
company <- "NESI"
sup_chain <- "Sri Lanka Yellowfin"

# summarize of companies and their supply chains
######### IDEA - How to create a dataframe that can list what variables to filter Compiled Vessels Indicators by (not set variables across supply chains) that could feed a function generating individual supply chain dataframes
company_sup_chains <- comp_vessels %>% 
  group_by(c, c_listname) %>% 
  summarize()

## Filter data by company & supply chain
vessels <- comp_vessels %>% 
  filter(c == company,
         c_listname == sup_chain)

# Specifically look at Bumble Bee Tuna supply chain of Fiji flagged vessels fishing in Fiji
bb_fiji <- comp_vessels %>% 
  filter(c %in% c("Bumble Bee"),
         c_listname %in% c("Tuna"),
         c_flag %in% c("Fiji"),
         str_detect(gfw_eez, "FJI"))

# NESI Sri Lanka Yellowfin 
nesi_srilanka <- comp_vessels %>% 
  filter(c %in% c("NESI"),
         c_listname %in% c("Sri Lanka Yellowfin"),
         c_flag %in% c("Sri Lanka"))

```

```{r scrape_open_registries}

# scrape FOC list from ITF Seafarers (International Transport Workers Federation)
itf_foc <- read_html("https://www.itfseafarers.org/en/focs/current-registries-listed-as-focs") %>% 
  html_node(xpath = "/html/body/div[1]/div/div[2]/main/div[2]/div/div/div[3]/article/div/div[1]/ul") %>% 
  html_elements("li") %>% 
  html_text2() %>% 
  as_tibble() %>% 
  rename("c_flag" = value) # name variable column

# vessels with flags that match in ITF FOC list
# foc_vessels <- vessel_assess %>% 
#   semi_join(itf_foc, by = "Flag")

```

## Functions used to generate report numbers

```{r functions}

# create report of general supply chain summary stats
report_generally <- function(supply_chain){
  report_general <- supply_chain %>% 
  summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
            "vessels_total_n" = length(v_id),
            "vessels_ais_n" = sum(!is.na(vv_ais_coverage_percent)),
            "prct_vessels_ais" = vessels_ais_n / vessels_total_n,
            "prct_ais_cover_min" = min(vv_ais_coverage_percent, na.rm = T),
            "prct_ais_cover_max" = max(vv_ais_coverage_percent, na.rm = T),
            "prct_ais_cover_median" = median(vv_ais_coverage_percent, na.rm = T),
            "prct_ais_cover_mean" = mean(vv_ais_coverage_percent, na.rm = T)
            )
  name <- paste0("report_general_", deparse(substitute(supply_chain)))
  assign(name, report_general, envir = parent.frame())
  return(report_general)
}

# create checklist of Key data elements (kde) for each company supply chain
# assesses completeness of data company provided
check_kde_list <- function(supply_chain){
  kde <- supply_chain %>% 
    summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
            "species" = any(!is.na(c_species) | !is.na(c_common_name)),
            "country_harvest" = any(!is.na(c_country)),
            "ports_landing" = any(!is.na(c_port)),
            "eez_highseas" = NA,
            "harvest_rfmo" = NA,
            "harvest_fao" = any(!is.na(c_fao)),
            "harvest_fao_sub" = NA,
            "cert_name" = NA,
            "fip" = any(!is.na(FIP)),
            "vessel_name" = any(!is.na(c_name)),
            "vessel_imo" = any(!is.na(c_imo)),
            "vessel_mmsi" = any(!is.na(c_mmsi)),
            "vessel_callsign" = NA,
            "vessel_flag" = any(!is.na(c_flag)),
            "ais_data" = any(!is.na(gfw_prop_ais_coverage)),
            "transship_reported" = NA
            ) 
  name <- paste0("report_kde_check_", deparse(substitute(supply_chain)))
  assign(name, kde, envir = parent.frame())
  return(kde)
}

# Generate Risk Indicators for report with vessel viewer values
assess_risk <- function(supply_chain){
  indicators <- supply_chain %>% 
  summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
      # High Risk Indicators      
            "iuu_listed" = sum((vv_iuu_listed)),
            "rfmo_no_auth_events" = sum(vv_rfmo_unauthorized_events),
            "rfmo_no_auth_vessels_n" = sum(vv_rfmo_unauthorized_events > 0),
            "transship_rfmo_events" = sum(vv_encounters_rfmo_unauthorized),
            "transship_rfmo_vessels_n" = sum(vv_encounters_rfmo_unauthorized > 0),
            "mpa_events" = sum(vv_mpa_events),
            "mpa_vessels_n" = sum(vv_mpa_events > 0),
            "mpa_total_hrs" = sum(vv_mpa_hrs),
      # Medium Risk Indicators
            "ais_disabling_events" = sum(vv_ais_disabled_n),
            "ais_disabling_vessels_n" = sum(vv_ais_disabled_n > 0),
            "ais_disabling_total_hrs" = sum(vv_ais_disable_hrs),
            "ais_prop_cover_1yr_min" = min(vv_ais_coverage_percent, na.rm = T),
            "ais_prop_cover_1yr_max" = max(vv_ais_coverage_percent, na.rm = T),
            "ais_prop_cover_1yr_median" = median(vv_ais_coverage_percent, na.rm = T),
            # number of vessels with trips > 11 months
            "vessels_long_trip_n" = sum(map_long_trip_n),
            "vessels_name_change_n" = sum(vv_name_change),
            "vessels_flag_change_n" = sum(vv_flag_change)
  )
  name <- paste0("report_ind_vv_", deparse(substitute(supply_chain)))
  assign(name, indicators, envir = parent.frame())
  return(indicators)
}

# Contextual Indicators
create_context <- function(supply_chain, foc_list){
  context <- supply_chain %>% 
  summarise("company" = unique(c),
            "supply_chain" = unique(c_listname),
            "vessel_flags" = paste(unique(c_flag), sep = ";"),
            "cpi" = NA,
            "psma" = paste(unique(m_c_psma), sep = ";"),
            # these need to use vessel flag not country of operation
            "eu_card" = paste(unique(m_c_eu_flag), sep = ";"),
            "us_card" = paste(unique(m_c_us_flag), sep = ";"),
            "simp" = paste(unique(m_c_or_flag), sep = ";"),
            "petrossian_clark" = paste(unique(m_petro_score), sep = ";")
          #  "open_registry" = paste(unique(m_c_or_flag), sep = ";")
            )
  # True if vessel flags are on FOC list, False if not
  foc <- any(str_detect(foc_list$c_flag, paste(context$vessel_flags, collapse = "|")))
  # add foc to output
  context_2 <- context %>% 
    mutate("open_registry" = foc)
  
  name <- paste0("report_context_", deparse(substitute(supply_chain)))
  assign(name, context_2, envir = parent.frame())
  return(context_2)
}
```

```{r generate_report_values}

report_generally(bb_fiji)

check_kde_list(bb_fiji)

assess_risk(bb_fiji)

create_context(bb_fiji, itf_foc)

```

```{r report_big_query}

bq_kde_nesi_sl <- nesi_srilanka %>%
  summarize(
    "company" = unique(c),
    "supply_chain" = unique(c_listname),
    "species" = any(!is.na(c_species) |!is.na(c_common_name)),
    "country_harvest" = any(!is.na(c_country)),
    "ports_landing" = any(!is.na(c_port)),
    "eez_highseas" = NA,
    "harvest_rfmo" = NA,
    "harvest_fao" = any(!is.na(c_fao)),
    "harvest_fao_sub" = NA,
    "cert_name" = NA,
    "fip" = any(!is.na(FIP)),
    "vessel_name" = any(!is.na(c_name)),
    "vessel_name_n" = sum(!is.na(c_name)),
    "vessel_imo" = any(!is.na(c_imo)),
    "vessel_imo_n" = sum(!is.na(c_imo)),
    "vessel_mmsi" = any(!is.na(c_mmsi)),
    "vessel_mmsi_n" = sum(!is.na(c_mmsi)),
    "vessel_callsign" = NA,
    "vessel_flag" = any(!is.na(c_flag)),
    "vessel_flag_n" = sum(!is.na(c_flag)),
    "ais_data" = any(!is.na(gfw_prop_ais_coverage)),
    "ais_data_n" = sum(!is.na(gfw_prop_ais_coverage)),
    "transship_reported" = NA
  ) 

bq_indicators_nesi_sl <-nesi_srilanka %>% 
  summarize("company" = unique(c),
            "supply_chain" = unique(c_listname),
      # High Risk Indicators      
            "iuu_listed" = sum((vv_iuu_listed)),
            "rfmo_no_auth_events" = NA,
            "rfmo_no_auth_vessels_n" = NA,
            "transship_rfmo_events" = sum(gfw_n_transship_unauthorized),
            "transship_rfmo_vessels_n" = sum(gfw_n_transship_unauthorized > 0),
            "mpa_events" = sum(gfw_fishing_hr_mpa),
            "mpa_vessels_n" = sum(gfw_fishing_hr_mpa > 0),
            "mpa_total_hrs" = sum(gfw_fishing_hr_mpa),
      # Medium Risk Indicators
            "ais_disabling_events" = NA,
            "ais_disabling_vessels_n" = sum(vv_ais_disabled_n > 0),
            "ais_disabling_total_hrs" = NA,
            "ais_prop_cover_2yr_min" = min(gfw_prop_ais_coverage, na.rm = T),
            "ais_prop_cover_2yr_max" = max(gfw_prop_ais_coverage, na.rm = T),
            "ais_prop_cover_2yr_median" = median(gfw_prop_ais_coverage, na.rm = T),
            # number of vessels with trips > 11 months
            "vessels_long_trip_n" = sum(map_long_trip_n),
            "vessels_name_change_n" = sum(vv_name_change),
            "vessels_flag_change_n" = sum(vv_flag_change)
  )



```

```{r kde_checklist_all}

# create kde checklist for all supply chains
kde_checklist <- purrr::map2_dfr(company_sup_chains$c, company_sup_chains$c_listname, check_kde_data)

```

```{r quick_summary_jim}
summary_jim <- comp_vessels %>% 
  group_by(c, c_listname) %>% 
  summarize(num_vessels = length(c_name),
            num_vessels_ais = sum(!is.na(gfw_prop_ais_coverage)),
            percent_vessels_ais = num_vessels_ais / num_vessels *100,
            mean_ais_prop = mean(gfw_prop_ais_coverage, na.rm = T),
            med_ais_prop = median(gfw_prop_ais_coverage, na.rm = T))
```

## General report values

-   Number of vessels in supply chain
-   AIS positions found for percent of supply chain vessels
-   Range AIS coverage percent in last year for supply chain

## KDE checklist

-   percent of missing KDE
-   species scientific name
-   country of harvest
-   port(s) of landing
-   fishing in EEZ or high seas
-   RFMO of harvest
-   FAO region
-   FAO subregion (optional)
-   Certification name (if applicable)
-   FIP profile (if applicable)
-   Vessel name
-   Vessel IMO IMO number
-   Vessel MMSI
-   Vessel call sign (optional)
-   Vessel flag state (optional)
-   AIS data
-   Reported transshipments

## List of IUU report indicators

-   RFMO IUU blacklisted vessels
-   Fishing events in RFMO without known authorization
    -   number of vessels
-   Potential transshipment events in RFMO without known authorization
    -   number of vessels
-   Potential fishing events in Marine Protected Areas
    -   number of vessels
    -   total fishing hours
-   Intentional ais disabling events
    -   total hours disabled
    -   proportion of AIS coverage in last year
-   Vessels with long fishing trips (\>11 mo)
-   Number of vessel name changes in last year
-   Number of vessel flag changes in last year


```{r iuu_vessel_list}

iuu_listed <- iuu_vessels %>% 
  filter(CurrentlyListed == "True") %>% 
  select(Name, MMSI, VesselStatus, 20:47) %>% 
  mutate(Name = toupper(Name),
         MMSI = as.numeric(MMSI))

scrt_vessels <- vessels %>% 
  select(c_name, gfw_mmsi) %>% 
#  filter(gfw_mmsi > 0) %>% 
  rename("Name" = c_name,
         "MMSI" = gfw_mmsi)

# cross validate IUU list and scrt vessels by mmsi - will match by NA (interpret results carefully)
iuu_mmsi <- iuu_listed %>%
  inner_join(scrt_vessels, by = c("MMSI"))
# cross validate IUU list by vessel name
iuu_name <- iuu_listed %>% 
  inner_join(scrt_vessels, by = "Name")



# Need to manually look at both tables of matching
```

## Contextual Risk Indicators

-   Corruption Perceptions Index
-   PSMA ratification
-   EU carding status
-   US listing status
-   SIMP
-   Petrossian & Clark (2014) score
-   Open Registries (vessel flag country)
